# A generic, single database configuration.
; The alembic.ini file is the main configuration file for Alembic.
; Its purpose is to define how Alembic behaves — including database connection, migration file locations, and logging settings

; When you run any Alembic command (like revision, upgrade, or downgrade), 
; Alembic looks under the [alembic] section to find the core settings it needs to run migrations correctly.
[alembic]

; This setting tells Alembic where to find the migration environment, including:
; The env.py file (which controls how migrations are run)
; The versions/ folder (where the migration scripts live)
script_location = %(here)s/alembic

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

; prepend_sys_path = . adds the project root (where alembic.ini is) to 
; Python's import path. This allows Alembic to import your app’s modules (like models) 
; from outside the alembic/ folder. It's essential when your model definitions aren’t in the same directory as Alembic.
prepend_sys_path = .


# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "path_separator"
# below.
# version_locations = %(here)s/bar:%(here)s/bat:%(here)s/alembic/versions

# path_separator; This indicates what character is used to split lists of file
# paths, including version_locations and prepend_sys_path within configparser
# files such as alembic.ini.
# The default rendered in new alembic.ini files is "os", which uses os.pathsep
# to provide os-dependent path splitting.
#
# Note that in order to support legacy alembic.ini files, this default does NOT
# take place if path_separator is not present in alembic.ini.  If this
# option is omitted entirely, fallback logic is as follows:
#
# 1. Parsing of the version_locations option falls back to using the legacy
#    "version_path_separator" key, which if absent then falls back to the legacy
#    behavior of splitting on spaces and/or commas.
# 2. Parsing of the prepend_sys_path option falls back to the legacy
#    behavior of splitting on spaces, commas, or colons.
#
# Valid values for path_separator are:
#
# path_separator = :
# path_separator = ;
# path_separator = space
# path_separator = newline
#
# Use os.pathsep. Default configuration used for new projects.

; Alembic needs a separator (like : or ;) to understand that these are multiple paths.
; path_separator = os tells Alembic: "Automatically use the path separator that matches the current operating system."
path_separator = os

# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# database URL.  This is consumed by the user-maintained env.py script only.
# other means of configuring database URLs may be customized within the env.py
# file.
; Alembic uses this URL to: Connect to the database, Inspect schemas, Apply migrations
sqlalchemy.url = postgresql://auth_user:auth_db_password@postgres/auth_db


; It’s an optional section that allows you to automatically run scripts or commands after a migration file is generated (i.e., after alembic revision is run).
; Think of it as a post-processing hook: “Once Alembic writes a new migration script, also do this.”
[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using "ruff" - use the module runner, against the "ruff" module
# hooks = ruff
# ruff.type = module
# ruff.module = ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Alternatively, use the exec runner to execute a binary found on your PATH
# hooks = ruff
# ruff.type = exec
# ruff.executable = ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Logging configuration.  This is also consumed by the user-maintained
# env.py script only.
; The [loggers] section tells Alembic what kinds of messages you want to see in the terminal when it runs — 
; like SQL queries, migration steps, or errors.
[loggers]
keys = root,sqlalchemy,alembic

; This section declares where log messages should go — like the terminal, a file, or even over network
[handlers]
keys = console

; This section defines how log messages should look when they are printed or written.
[formatters]
keys = generic

; This section defines the root logger, which is the base logger in Python’s logging system.
; It catches any log messages that don’t match a more specific logger (like alembic or sqlalchemy).
[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
